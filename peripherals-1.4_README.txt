
(Cannon Mount / Compact Cannon Mount / Fixed Cannon Mount)
cannon_mount :
    .getPitch() -> pitch
    .getYaw() -> yaw
    .setYaw() [[only works for auto-cannons]]
    .setPitch() [[only works for auto-cannons]]
    .assemble([true, false])
    .fire([0 - 15])

(Lectern)
data_link : [[signed book is needed for selecting the player]]
    .status(text) 

(Phys Bearing)
physics_bearing :
    .getAngle() -> angle 
    .setAxisOffset(x,y,z, ignoredAxis) [[ignoredAxis: "X" || "Y" || "Z"]]

(Active Protection System (APS))
aps : 
    .detect() -> [{uuid=uuid, type=type}, ..]
    .intercept(uuid)
    .getCooldown()
    .getCharges()

(Missile Approach Warning System (MAWS))
maws :
    .detect(range) -> [{uuid=uuid, id=id}, ..]

(Weapons Manager)
weapons_manager:
    .scan() -> {id = [uuid, ..], ..}
    .setRotation(uuid, yaw, pitch)
    .fire(uuid)

"vship" :
    [[returns the directions of the vs ship]]
    .getLook() -> look vector
    .getUp() -> up vector
    .getRight() -> right vector

    .getAngularVelocity() -> vector

    world.transformPosition(shipyard pos) -> world pos
    world.transformDirection(shipyard dir)  -> world dir

    shipyard.transformPosition(world pos)  -> shipyard pos
    shipyard.transformDirection(world dir)  -> shipyard dir

    .getPositionAABB(shipyard min, shipyard max) -> world position

    .blockChanged() -> world position, shipyard position, change of mass

require "utils.threads" :
    .init(id) [[ id is the name (string) for the group of threads ]]
    .start(id, function) -> {stop=stop}

require "encryption.basic" :
    .wrap(modem, key) :
    modem:send(message, channel)
    modem:receive(channel)